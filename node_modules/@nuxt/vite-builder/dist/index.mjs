import * as vite from 'vite';
import { resolve, join, normalize, isAbsolute, dirname } from 'pathe';
import { logger, resolveModule, requireModule } from '@nuxt/kit';
import { sanitizeFilePath } from 'mlly';
import { joinURL, withoutTrailingSlash, withoutLeadingSlash } from 'ufo';
import { getPort } from 'get-port-please';
import vuePlugin from '@vitejs/plugin-vue';
import viteJsxPlugin from '@vitejs/plugin-vue-jsx';
import { transform } from 'esbuild';
import { visualizer } from 'rollup-plugin-visualizer';
import fse from 'fs-extra';
import { createHash } from 'crypto';
import { readdirSync, statSync, promises, existsSync } from 'fs';
import { createUnplugin } from 'unplugin';
import escapeRE from 'escape-string-regexp';
import pDebounce from 'p-debounce';
import { pathToFileURL, fileURLToPath } from 'url';
import { builtinModules } from 'module';
import { isExternal as isExternal$1, ExternalsDefaults } from 'externality';
import { genObjectFromRawEntries, genDynamicImport } from 'knitwork';
import createResolver from 'postcss-import-resolver';
import defu from 'defu';

function cacheDirPlugin(rootDir, name) {
  const optimizeCacheDir = resolve(rootDir, "node_modules/.cache/vite", name);
  return {
    name: "nuxt:cache-dir",
    configResolved(resolvedConfig) {
      resolvedConfig.optimizeCacheDir = optimizeCacheDir;
    }
  };
}

function analyzePlugin(ctx) {
  return [
    {
      name: "nuxt:analyze-minify",
      async generateBundle(_opts, outputBundle) {
        for (const [_bundleId, bundle] of Object.entries(outputBundle)) {
          if (bundle.type !== "chunk") {
            continue;
          }
          const originalEntries = Object.entries(bundle.modules);
          const minifiedEntries = await Promise.all(originalEntries.map(async ([moduleId, module]) => {
            const { code } = await transform(module.code || "", { minify: true });
            return [moduleId, { ...module, code }];
          }));
          bundle.modules = Object.fromEntries(minifiedEntries);
        }
        return null;
      }
    },
    visualizer({
      ...ctx.nuxt.options.build.analyze,
      filename: ctx.nuxt.options.build.analyze.filename.replace("{name}", "client"),
      title: "Client bundle stats",
      gzipSize: true
    })
  ];
}

const wpfs = {
  ...fse,
  join
};

async function writeManifest(ctx, extraEntries = []) {
  const clientDist = resolve(ctx.nuxt.options.buildDir, "dist/client");
  const serverDist = resolve(ctx.nuxt.options.buildDir, "dist/server");
  const entries = [
    "@vite/client",
    "entry.mjs",
    ...extraEntries
  ];
  const devClientManifest = {
    publicPath: joinURL(ctx.nuxt.options.app.baseURL, ctx.nuxt.options.app.buildAssetsDir),
    all: entries,
    initial: entries,
    async: [],
    modules: {}
  };
  const clientManifest = ctx.nuxt.options.dev ? devClientManifest : await fse.readJSON(resolve(clientDist, "manifest.json"));
  await fse.mkdirp(serverDist);
  await fse.writeFile(resolve(serverDist, "client.manifest.json"), JSON.stringify(clientManifest, null, 2), "utf8");
  await fse.writeFile(resolve(serverDist, "client.manifest.mjs"), "export default " + JSON.stringify(clientManifest, null, 2), "utf8");
}

function uniq(arr) {
  return Array.from(new Set(arr));
}
const IS_CSS_RE = /\.(?:css|scss|sass|postcss|less|stylus|styl)(\?[^.]+)?$/;
function isCSS(file) {
  return IS_CSS_RE.test(file);
}
function hashId(id) {
  return "$id_" + hash(id);
}
function hash(input, length = 8) {
  return createHash("sha256").update(input).digest("hex").slice(0, length);
}
function readDirRecursively(dir) {
  return readdirSync(dir).reduce((files, file) => {
    const name = join(dir, file);
    const isDirectory2 = statSync(name).isDirectory();
    return isDirectory2 ? [...files, ...readDirRecursively(name)] : [...files, name];
  }, []);
}
async function isDirectory(path) {
  try {
    return (await promises.stat(path)).isDirectory();
  } catch (_err) {
    return false;
  }
}

function devStyleSSRPlugin(options) {
  return {
    name: "nuxt:dev-style-ssr",
    apply: "serve",
    enforce: "post",
    transform(code, id) {
      if (!isCSS(id) || !code.includes("import.meta.hot")) {
        return;
      }
      let moduleId = id;
      if (moduleId.startsWith(options.rootDir)) {
        moduleId = moduleId.slice(options.rootDir.length);
      }
      const selector = joinURL(options.buildAssetsURL, moduleId);
      return code + `
document.querySelectorAll(\`link[href="${selector}"]\`).forEach(i=>i.remove())`;
    }
  };
}

const RelativeAssetPlugin = function() {
  return {
    name: "nuxt:vite-relative-asset",
    generateBundle(_, bundle) {
      const generatedAssets = Object.entries(bundle).filter(([_2, asset]) => asset.type === "asset").map(([key]) => escapeRE(key));
      const assetRE = new RegExp(`\\/__NUXT_BASE__\\/(${generatedAssets.join("|")})`, "g");
      for (const file in bundle) {
        const asset = bundle[file];
        if (asset.type === "asset" && typeof asset.source === "string" && asset.fileName.endsWith(".css")) {
          const depth = file.split("/").length - 1;
          const assetBase = depth === 0 ? "." : Array.from({ length: depth }).map(() => "..").join("/");
          const publicBase = Array.from({ length: depth + 1 }).map(() => "..").join("/");
          asset.source = asset.source.replace(assetRE, (r) => r.replace(/\/__NUXT_BASE__/g, assetBase)).replace(/\/__NUXT_BASE__/g, publicBase);
        }
      }
    }
  };
};
const VITE_ASSET_RE = /^export default ["'](__VITE_ASSET.*)["']$/;
const DynamicBasePlugin = createUnplugin(function(options) {
  return {
    name: "nuxt:dynamic-base-path",
    resolveId(id) {
      if (id.startsWith("/__NUXT_BASE__")) {
        return id.replace("/__NUXT_BASE__", "");
      }
      return null;
    },
    enforce: "post",
    transform(original, id) {
      let code = original;
      if (options.globalPublicPath && id.includes("entry.ts")) {
        code = `import { joinURL } from "ufo";${options.globalPublicPath} = joinURL(NUXT_BASE, NUXT_CONFIG.app.buildAssetsDir);` + code;
      }
      const assetId = code.match(VITE_ASSET_RE);
      if (assetId) {
        code = `import { joinURL } from "ufo";export default joinURL(NUXT_BASE, NUXT_CONFIG.app.buildAssetsDir, "${assetId[1]}".replace("/__NUXT_BASE__", ""));`;
      }
      if (code.includes("NUXT_BASE") && !code.includes("const NUXT_BASE =")) {
        code = "const NUXT_BASE = NUXT_CONFIG.app.cdnURL || NUXT_CONFIG.app.baseURL;" + code;
        if (options.env === "dev") {
          code = `const NUXT_CONFIG = { app: ${JSON.stringify(options.devAppConfig)} };` + code;
        } else if (options.env === "server") {
          code = 'import NUXT_CONFIG from "#config";' + code;
        } else {
          code = "const NUXT_CONFIG = __NUXT__.config;" + code;
        }
      }
      if (id === "vite/preload-helper") {
        code = code.replace(/const base = ['"]\/__NUXT_BASE__\/['"]/, 'import { joinURL } from "ufo";const base = joinURL(NUXT_BASE, NUXT_CONFIG.app.buildAssetsDir);');
      }
      code = code.replace(/from *['"]\/__NUXT_BASE__(\/[^'"]*)['"]/g, 'from "$1"');
      for (const delimiter of ["`", '"', "'"]) {
        const delimiterRE = new RegExp(`${delimiter}([^${delimiter}]*)\\/__NUXT_BASE__\\/([^${delimiter}]*)${delimiter}`, "g");
        code = code.replace(delimiterRE, "`$1${NUXT_BASE}$2`");
      }
      if (code === original) {
        return;
      }
      return code;
    }
  };
});

async function buildClient(ctx) {
  const clientConfig = vite.mergeConfig(ctx.config, {
    define: {
      "process.server": false,
      "process.client": true,
      "module.hot": false
    },
    resolve: {
      alias: {
        "#build/plugins": resolve(ctx.nuxt.options.buildDir, "plugins/client")
      }
    },
    build: {
      rollupOptions: {
        output: {
          chunkFileNames: ctx.nuxt.options.dev ? void 0 : "[name]-[hash].mjs",
          entryFileNames: ctx.nuxt.options.dev ? "entry.mjs" : "[name]-[hash].mjs"
        }
      },
      manifest: true,
      outDir: resolve(ctx.nuxt.options.buildDir, "dist/client")
    },
    plugins: [
      cacheDirPlugin(ctx.nuxt.options.rootDir, "client"),
      vuePlugin(ctx.config.vue),
      viteJsxPlugin(),
      DynamicBasePlugin.vite({ env: "client", devAppConfig: ctx.nuxt.options.app }),
      RelativeAssetPlugin(),
      devStyleSSRPlugin({
        rootDir: ctx.nuxt.options.rootDir,
        buildAssetsURL: joinURL(ctx.nuxt.options.app.baseURL, ctx.nuxt.options.app.buildAssetsDir)
      })
    ],
    server: {
      middlewareMode: true
    }
  });
  if (ctx.nuxt.options.build.analyze) {
    clientConfig.plugins.push(...analyzePlugin(ctx));
  }
  await ctx.nuxt.callHook("vite:extendConfig", clientConfig, { isClient: true, isServer: false });
  const viteServer = await vite.createServer(clientConfig);
  await ctx.nuxt.callHook("vite:serverCreated", viteServer);
  const viteMiddleware = (req, res, next) => {
    const originalURL = req.url;
    viteServer.middlewares.handle(req, res, (err) => {
      req.url = originalURL;
      next(err);
    });
  };
  await ctx.nuxt.callHook("server:devMiddleware", viteMiddleware);
  ctx.nuxt.hook("close", async () => {
    await viteServer.close();
  });
  if (!ctx.nuxt.options.dev) {
    const start = Date.now();
    await vite.build(clientConfig);
    await ctx.nuxt.callHook("build:resources", wpfs);
    logger.info(`Client built in ${Date.now() - start}ms`);
  }
  await writeManifest(ctx);
}

function isExternal(opts, id) {
  const ssrConfig = opts.viteServer.config.ssr;
  const externalOpts = {
    inline: [
      /virtual:/,
      /\.ts$/,
      ...ExternalsDefaults.inline,
      ...ssrConfig.noExternal
    ],
    external: [
      ...ssrConfig.external,
      /node_modules/
    ],
    resolve: {
      type: "module",
      extensions: [".ts", ".js", ".json", ".vue", ".mjs", ".jsx", ".tsx", ".wasm"]
    }
  };
  return isExternal$1(id, opts.viteServer.config.root, externalOpts);
}
async function transformRequest(opts, id) {
  if (id && id.startsWith("/@id/__x00__")) {
    id = "\0" + id.slice("/@id/__x00__".length);
  }
  if (id && id.startsWith("/@id/")) {
    id = id.slice("/@id/".length);
  }
  if (id && id.startsWith("/@fs/")) {
    id = id.slice("/@fs".length);
    if (id.match(/^\/\w:/)) {
      id = id.slice(1);
    }
  } else if (!id.includes("entry") && id.startsWith("/")) {
    const resolvedPath = resolve(opts.viteServer.config.root, "." + id);
    if (existsSync(resolvedPath)) {
      id = resolvedPath;
    }
  }
  const withoutVersionQuery = id.replace(/\?v=\w+$/, "");
  if (await isExternal(opts, withoutVersionQuery)) {
    const path = builtinModules.includes(withoutVersionQuery.split("node:").pop()) ? withoutVersionQuery : pathToFileURL(withoutVersionQuery).href;
    return {
      code: `(global, exports, importMeta, ssrImport, ssrDynamicImport, ssrExportAll) => ${genDynamicImport(path, { wrapper: false })}.then(r => { exports.default = r.default; ssrExportAll(r) }).catch(e => { console.error(e); throw new Error(${JSON.stringify(`[vite dev] Error loading external "${id}".`)}) })`,
      deps: [],
      dynamicDeps: []
    };
  }
  const res = await opts.viteServer.transformRequest(id, { ssr: true }).catch((err) => {
    console.warn(`[SSR] Error transforming ${id}:`, err);
  }) || { code: "", map: {}, deps: [], dynamicDeps: [] };
  const code = `async function (global, __vite_ssr_exports__, __vite_ssr_import_meta__, __vite_ssr_import__, __vite_ssr_dynamic_import__, __vite_ssr_exportAll__) {
${res.code || "/* empty */"};
}`;
  return { code, deps: res.deps || [], dynamicDeps: res.dynamicDeps || [] };
}
async function transformRequestRecursive(opts, id, parent = "<entry>", chunks = {}) {
  if (chunks[id]) {
    chunks[id].parents.push(parent);
    return;
  }
  const res = await transformRequest(opts, id);
  const deps = uniq([...res.deps, ...res.dynamicDeps]);
  chunks[id] = {
    id,
    code: res.code,
    deps,
    parents: [parent]
  };
  for (const dep of deps) {
    await transformRequestRecursive(opts, dep, id, chunks);
  }
  return Object.values(chunks);
}
async function bundleRequest(opts, entryURL) {
  const chunks = await transformRequestRecursive(opts, entryURL);
  const listIds = (ids) => ids.map((id) => `// - ${id} (${hashId(id)})`).join("\n");
  const chunksCode = chunks.map((chunk) => `
// --------------------
// Request: ${chunk.id}
// Parents: 
${listIds(chunk.parents)}
// Dependencies: 
${listIds(chunk.deps)}
// --------------------
const ${hashId(chunk.id)} = ${chunk.code}
`).join("\n");
  const manifestCode = `const __modules__ = ${genObjectFromRawEntries(chunks.map((chunk) => [chunk.id, hashId(chunk.id)]))}`;
  const ssrModuleLoader = `
const __pendingModules__ = new Map()
const __pendingImports__ = new Map()
const __ssrContext__ = { global: globalThis }

function __ssrLoadModule__(url, urlStack = []) {
  const pendingModule = __pendingModules__.get(url)
  if (pendingModule) { return pendingModule }
  const modulePromise = __instantiateModule__(url, urlStack)
  __pendingModules__.set(url, modulePromise)
  modulePromise.catch(() => { __pendingModules__.delete(url) })
         .finally(() => { __pendingModules__.delete(url) })
  return modulePromise
}

async function __instantiateModule__(url, urlStack) {
  const mod = __modules__[url]
  if (mod.stubModule) { return mod.stubModule }
  const stubModule = { [Symbol.toStringTag]: 'Module' }
  Object.defineProperty(stubModule, '__esModule', { value: true })
  mod.stubModule = stubModule
  // https://vitejs.dev/guide/api-hmr.html
  const importMeta = { url, hot: { accept() {}, prune() {}, dispose() {}, invalidate() {}, decline() {}, on() {} } }
  urlStack = urlStack.concat(url)
  const isCircular = url => urlStack.includes(url)
  const pendingDeps = []
  const ssrImport = async (dep) => {
    // TODO: Handle externals if dep[0] !== '.' | '/'
    if (!isCircular(dep) && !__pendingImports__.get(dep)?.some(isCircular)) {
      pendingDeps.push(dep)
      if (pendingDeps.length === 1) {
        __pendingImports__.set(url, pendingDeps)
      }
      await __ssrLoadModule__(dep, urlStack)
      if (pendingDeps.length === 1) {
        __pendingImports__.delete(url)
      } else {
        pendingDeps.splice(pendingDeps.indexOf(dep), 1)
      }
    }
    return __modules__[dep].stubModule
  }
  function ssrDynamicImport (dep) {
    // TODO: Handle dynamic import starting with . relative to url
    return ssrImport(dep)
  }

  function ssrExportAll(sourceModule) {
    for (const key in sourceModule) {
      if (key !== 'default') {
        try {
          Object.defineProperty(stubModule, key, {
            enumerable: true,
            configurable: true,
            get() { return sourceModule[key] }
          })
        } catch (_err) { }
      }
    }
  }

  await mod(
    __ssrContext__.global,
    stubModule,
    importMeta,
    ssrImport,
    ssrDynamicImport,
    ssrExportAll
  )

  return stubModule
}
`;
  const code = [
    chunksCode,
    manifestCode,
    ssrModuleLoader,
    `export default await __ssrLoadModule__(${JSON.stringify(entryURL)})`
  ].join("\n\n");
  return {
    code,
    ids: chunks.map((i) => i.id)
  };
}

async function buildServer(ctx) {
  const _resolve = (id) => resolveModule(id, { paths: ctx.nuxt.options.modulesDir });
  const serverConfig = vite.mergeConfig(ctx.config, {
    define: {
      "process.server": true,
      "process.client": false,
      "typeof window": '"undefined"',
      "typeof document": '"undefined"',
      "typeof navigator": '"undefined"',
      "typeof location": '"undefined"',
      "typeof XMLHttpRequest": '"undefined"'
    },
    resolve: {
      alias: {
        "#build/plugins": resolve(ctx.nuxt.options.buildDir, "plugins/server"),
        "vue/server-renderer": _resolve("vue/server-renderer"),
        "vue/compiler-sfc": _resolve("vue/compiler-sfc"),
        "@vue/reactivity": _resolve(`@vue/reactivity/dist/reactivity.cjs${ctx.nuxt.options.dev ? "" : ".prod"}.js`),
        "@vue/shared": _resolve(`@vue/shared/dist/shared.cjs${ctx.nuxt.options.dev ? "" : ".prod"}.js`),
        "vue-router": _resolve(`vue-router/dist/vue-router.cjs${ctx.nuxt.options.dev ? "" : ".prod"}.js`),
        vue: _resolve(`vue/dist/vue.cjs${ctx.nuxt.options.dev ? "" : ".prod"}.js`)
      }
    },
    ssr: {
      noExternal: [
        ...ctx.nuxt.options.build.transpile,
        /\/esm\/.*\.js$/,
        /\.(es|esm|esm-browser|esm-bundler).js$/,
        "/__vue-jsx",
        "#app",
        "nuxt3",
        /@nuxt\/nitro\/dist/,
        /@nuxt\/nitro\/src/
      ]
    },
    build: {
      outDir: resolve(ctx.nuxt.options.buildDir, "dist/server"),
      ssr: ctx.nuxt.options.ssr ?? true,
      rollupOptions: {
        output: {
          entryFileNames: "server.mjs",
          preferConst: true,
          format: "module"
        },
        external: ["#config"],
        onwarn(warning, rollupWarn) {
          if (!["UNUSED_EXTERNAL_IMPORT"].includes(warning.code)) {
            rollupWarn(warning);
          }
        }
      }
    },
    server: {
      preTransformRequests: false
    },
    plugins: [
      cacheDirPlugin(ctx.nuxt.options.rootDir, "server"),
      vuePlugin(ctx.config.vue),
      DynamicBasePlugin.vite({ env: ctx.nuxt.options.dev ? "dev" : "server", devAppConfig: ctx.nuxt.options.app }),
      viteJsxPlugin()
    ]
  });
  await ctx.nuxt.callHook("vite:extendConfig", serverConfig, { isClient: false, isServer: true });
  ctx.nuxt.hook("nitro:generate", async () => {
    const clientDist = resolve(ctx.nuxt.options.buildDir, "dist/client");
    const publicDir = join(ctx.nuxt.options.srcDir, ctx.nuxt.options.dir.public);
    let publicFiles = [];
    if (await isDirectory(publicDir)) {
      publicFiles = readDirRecursively(publicDir).map((r) => r.replace(publicDir, ""));
      for (const file of publicFiles) {
        try {
          fse.rmSync(join(clientDist, file));
        } catch {
        }
      }
    }
    if (await isDirectory(clientDist)) {
      const nestedAssetsPath = withoutTrailingSlash(join(clientDist, ctx.nuxt.options.app.buildAssetsDir));
      if (await isDirectory(nestedAssetsPath)) {
        await fse.copy(nestedAssetsPath, clientDist, { recursive: true });
        await fse.remove(nestedAssetsPath);
      }
    }
  });
  const onBuild = () => ctx.nuxt.callHook("build:resources", wpfs);
  if (!ctx.nuxt.options.dev) {
    const start = Date.now();
    logger.info("Building server...");
    await vite.build(serverConfig);
    await onBuild();
    logger.success(`Server built in ${Date.now() - start}ms`);
    return;
  }
  if (!ctx.nuxt.options.ssr) {
    await onBuild();
    return;
  }
  const viteServer = await vite.createServer(serverConfig);
  await ctx.nuxt.callHook("vite:serverCreated", viteServer);
  ctx.nuxt.hook("close", () => viteServer.close());
  await viteServer.pluginContainer.buildStart({});
  const _doBuild = async () => {
    const start = Date.now();
    const { code, ids } = await bundleRequest({ viteServer }, resolve(ctx.nuxt.options.appDir, "entry"));
    await fse.writeFile(resolve(ctx.nuxt.options.buildDir, "dist/server/server.mjs"), code, "utf-8");
    await writeManifest(ctx, ids.filter(isCSS).map((i) => i.slice(1)));
    const time = Date.now() - start;
    logger.success(`Vite server built in ${time}ms`);
    await onBuild();
  };
  const doBuild = pDebounce(_doBuild, 100);
  await _doBuild();
  viteServer.watcher.on("all", (_event, file) => {
    file = normalize(file);
    if (file.indexOf(ctx.nuxt.options.buildDir) === 0) {
      return;
    }
    doBuild();
  });
  ctx.nuxt.hook("app:templatesGenerated", () => doBuild());
}

const PREFIX = "\0virtual:";
function virtual(vfs) {
  const extensions = ["", ".ts", ".vue", ".mjs", ".cjs", ".js", ".json"];
  const resolveWithExt = (id) => {
    for (const ext of extensions) {
      const rId = id + ext;
      if (rId in vfs) {
        return rId;
      }
    }
    return null;
  };
  return {
    name: "virtual",
    resolveId(id, importer) {
      if (process.platform === "win32" && isAbsolute(id)) {
        id = resolve(id);
      }
      const resolvedId = resolveWithExt(id);
      if (resolvedId) {
        return PREFIX + resolvedId;
      }
      if (importer && !isAbsolute(id)) {
        const importerNoPrefix = importer.startsWith(PREFIX) ? importer.slice(PREFIX.length) : importer;
        const importedDir = dirname(importerNoPrefix);
        const resolved = resolveWithExt(join(importedDir, id));
        if (resolved) {
          return PREFIX + resolved;
        }
      }
      return null;
    },
    load(id) {
      if (!id.startsWith(PREFIX)) {
        return null;
      }
      const idNoPrefix = id.slice(PREFIX.length);
      return {
        code: vfs[idNoPrefix],
        map: null
      };
    }
  };
}

async function warmupViteServer(server, entries) {
  const warmedUrls = /* @__PURE__ */ new Set();
  const warmup = async (url) => {
    if (warmedUrls.has(url)) {
      return void 0;
    }
    warmedUrls.add(url);
    try {
      await server.transformRequest(url);
    } catch (e) {
      logger.debug("Warmup for %s failed with: %s", url, e);
    }
    const deps = Array.from(server.moduleGraph.urlToModuleMap.get(url)?.importedModules || []);
    await Promise.all(deps.map((m) => warmup(m.url)));
  };
  await Promise.all(entries.map((entry) => warmup(entry)));
}

const distDir = dirname(fileURLToPath(import.meta.url));
resolve(distDir, "..");

function resolveCSSOptions(nuxt) {
  const css = {
    postcss: {
      plugins: []
    }
  };
  const plugins = defu(nuxt.options.build.postcss.postcssOptions.plugins, {
    "postcss-import": {
      resolve: createResolver({
        alias: { ...nuxt.options.alias },
        modules: [
          nuxt.options.srcDir,
          nuxt.options.rootDir,
          ...nuxt.options.modulesDir
        ]
      })
    },
    "postcss-url": {},
    autoprefixer: {}
  });
  for (const name in plugins) {
    const opts = plugins[name];
    if (!opts) {
      continue;
    }
    const plugin = requireModule(name, {
      paths: [
        ...nuxt.options.modulesDir,
        distDir
      ]
    });
    css.postcss.plugins.push(plugin(opts));
  }
  return css;
}

async function bundle(nuxt) {
  const hmrPortDefault = 24678;
  const hmrPort = await getPort({
    port: hmrPortDefault,
    ports: Array.from({ length: 20 }, (_, i) => hmrPortDefault + 1 + i)
  });
  const ctx = {
    nuxt,
    config: vite.mergeConfig({
      root: nuxt.options.srcDir,
      mode: nuxt.options.dev ? "development" : "production",
      logLevel: "warn",
      define: {
        "process.dev": nuxt.options.dev
      },
      resolve: {
        extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".vue"],
        alias: {
          ...nuxt.options.alias,
          "#app": nuxt.options.appDir,
          "#build/plugins": "",
          "#build": nuxt.options.buildDir,
          "/entry.mjs": resolve(nuxt.options.appDir, "entry"),
          "web-streams-polyfill/ponyfill/es2018": "unenv/runtime/mock/empty",
          "abort-controller": "unenv/runtime/mock/empty"
        }
      },
      base: nuxt.options.dev ? joinURL(nuxt.options.app.baseURL, nuxt.options.app.buildAssetsDir) : "/__NUXT_BASE__/",
      publicDir: resolve(nuxt.options.srcDir, nuxt.options.dir.public),
      vue: {
        isProduction: !nuxt.options.dev,
        template: { compilerOptions: nuxt.options.vue.compilerOptions }
      },
      css: resolveCSSOptions(nuxt),
      optimizeDeps: {
        exclude: [
          ...nuxt.options.build.transpile.filter((i) => typeof i === "string"),
          "vue-demi"
        ],
        entries: [
          resolve(nuxt.options.appDir, "entry.ts")
        ]
      },
      esbuild: {
        jsxFactory: "h",
        jsxFragment: "Fragment",
        tsconfigRaw: "{}"
      },
      clearScreen: false,
      build: {
        assetsDir: nuxt.options.dev ? withoutLeadingSlash(nuxt.options.app.buildAssetsDir) : ".",
        emptyOutDir: false,
        rollupOptions: {
          input: resolve(nuxt.options.appDir, "entry"),
          output: { sanitizeFileName: sanitizeFilePath }
        }
      },
      plugins: [
        virtual(nuxt.vfs)
      ],
      server: {
        hmr: {
          clientPort: hmrPort,
          port: hmrPort
        },
        fs: {
          strict: false,
          allow: [
            nuxt.options.buildDir,
            nuxt.options.appDir,
            nuxt.options.srcDir,
            nuxt.options.rootDir,
            ...nuxt.options.modulesDir
          ]
        }
      }
    }, nuxt.options.vite || {})
  };
  await nuxt.callHook("vite:extend", ctx);
  nuxt.hook("vite:serverCreated", (server) => {
    ctx.nuxt.hook("app:templatesGenerated", () => {
      for (const [id, mod] of server.moduleGraph.idToModuleMap) {
        if (id.startsWith("\0virtual:")) {
          server.moduleGraph.invalidateModule(mod);
        }
      }
    });
    const start = Date.now();
    warmupViteServer(server, ["/entry.mjs"]).then(() => logger.info(`Vite warmed up in ${Date.now() - start}ms`)).catch(logger.error);
  });
  await buildClient(ctx);
  await buildServer(ctx);
}

export { bundle };
